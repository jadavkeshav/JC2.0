// mysql

// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model Course {
//   id          String  @id @default(uuid())
//   userId      String
//   title       String  @db.Text
//   description String? @db.Text
//   imageUrl    String? @db.Text
//   price       Float?
//   isPublished Boolean @default(false)

//   categoryId String?
//   category Category? @relation(fields: [categoryId], references: [id])

//   attachments Attachment[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([categoryId])
// }

// model Category {
//   id String @id @default(uuid())
//   name String @unique
//   Course Course[]
// }

// model Attachment {
//   id   String @id @default(uuid())
//   name String
//   url  String @db.Text

//   courseId String
//   Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([courseId])
// }

//mongoDB

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
//   relationMode="prisma"
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model Course {
//   id          String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId      String
//   title       String
//   description String?
//   imageUrl    String?
//   price       Float?
//   isPublished Boolean @default(false)

//   categoryId String?
//   category   Category? @relation(fields: [categoryId], references: [id])

//   attachments Attachment[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([categoryId])
// }

// model Category {
//   id     String  @id @default(auto()) @map("_id") @db.ObjectId
//   name   String  @unique
//   Course Course[]
// }

// model Attachment {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   url       String

//   courseId  String
//   Course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([courseId])
// }


datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Course {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB's ObjectId type for auto-generated IDs
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean  @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  attachments Attachment[]
  chapters    Chapter[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB's ObjectId type for auto-generated IDs
  name   String   @unique
  Course Course[]
}

model Attachment {
 id        String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB's ObjectId type for auto-generated IDs
  name String
  url  String

  courseId String
  Course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB's ObjectId type for auto-generated IDs
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)

  muxData MuxData?

  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB's ObjectId type for auto-generated IDs
  assetId    String
  playbackId String?

  chapterId String @unique
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB's ObjectId type for auto-generated IDs
  userId String

  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId// MongoDB's ObjectId type for auto-generated IDs
  userId String

  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model StripeCustomer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB's ObjectId type for auto-generated IDs
  userId           String   @unique
  stripeCustomerId String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
